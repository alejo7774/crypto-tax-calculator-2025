import datetime
from functools import lru_cache
import pandas as pd
import yfinance as yf

# --- DATOS PREDEFINIDOS DE TIPO DE CAMBIO USD/EUR PARA 2024 ---
# 1 EUR = X USD (datos originales que proporcionaste)
# ¡¡¡ASEGÚRATE DE QUE ESTA TABLA ESTÉ COMPLETA Y CORRECTA PARA TODO 2024!!!
_raw_eur_to_usd_rates_2024 = {
    "2024-01-01": 1.1038, "2024-01-02": 1.0943, "2024-01-03": 1.0925, "2024-01-04": 1.0944, 
    "2024-01-05": 1.0955, "2024-01-06": 1.0946, "2024-01-07": 1.0940, "2024-01-08": 1.0952, 
    "2024-01-09": 1.0932, "2024-01-10": 1.0973, "2024-01-11": 1.0976, "2024-01-12": 1.0964, 
    "2024-01-13": 1.0945, "2024-01-14": 1.0882, "2024-01-15": 1.0948, "2024-01-16": 1.0877, 
    "2024-01-17": 1.0884, "2024-01-18": 1.0877, "2024-01-19": 1.0905, "2024-01-20": 1.0891, 
    "2024-01-21": 1.0887, "2024-01-22": 1.0880, "2024-01-23": 1.0859, "2024-01-24": 1.0885, 
    "2024-01-25": 1.0846, "2024-01-26": 1.0864, "2024-01-27": 1.0852, "2024-01-28": 1.0848, 
    "2024-01-29": 1.0837, "2024-01-30": 1.0844, "2024-01-31": 1.0810,
    "2024-02-01": 1.0875, "2024-02-02": 1.0799, "2024-02-03": 1.0783, "2024-02-04": 1.0779, 
    "2024-02-05": 1.0743, "2024-02-06": 1.0756, "2024-02-07": 1.0777, "2024-02-08": 1.0777, 
    "2024-02-09": 1.0785, "2024-02-10": 1.0774, "2024-02-11": 1.0769, "2024-02-12": 1.0772, 
    "2024-02-13": 1.0710, "2024-02-14": 1.0731, "2024-02-15": 1.0776, "2024-02-16": 1.0777, 
    "2024-02-17": 1.0768, "2024-02-18": 1.0764, "2024-02-19": 1.0775, "2024-02-20": 1.0811, 
    "2024-02-21": 1.0822, "2024-02-22": 1.0826, "2024-02-23": 1.0832, "2024-02-24": 1.0818, 
    "2024-02-25": 1.0812, "2024-02-26": 1.0849, "2024-02-27": 1.0844, "2024-02-28": 1.0841, 
    "2024-02-29": 1.0805,
    "2024-03-01": 1.0845, "2024-03-02": 1.0841, "2024-03-03": 1.0835, "2024-03-04": 1.0858, 
    "2024-03-05": 1.0858, "2024-03-06": 1.0899, "2024-03-07": 1.0949, "2024-03-08": 1.0944, 
    "2024-03-09": 1.0852, "2024-03-10": 1.0856, "2024-03-11": 1.0927, "2024-03-12": 1.0928, 
    "2024-03-13": 1.0951, "2024-03-14": 1.0885, "2024-03-15": 1.0890, "2024-03-16": 1.0890, 
    "2024-03-17": 1.0888, "2024-03-18": 1.0874, "2024-03-19": 1.0866, "2024-03-20": 1.0931, 
    "2024-03-21": 1.0861, "2024-03-22": 1.0858, "2024-03-23": 1.0817, "2024-03-24": 1.0824, 
    "2024-03-25": 1.0838, "2024-03-26": 1.0833, "2024-03-27": 1.0817, "2024-03-28": 1.0790, 
    "2024-03-29": 1.0800, "2024-03-30": 1.0801, "2024-03-31": 1.0835,
    "2024-04-01": 1.0742, "2024-04-02": 1.0770, "2024-04-03": 1.0838, "2024-04-04": 1.0838, 
    "2024-04-05": 1.0844, "2024-04-06": 1.0789, "2024-04-07": 1.0795, "2024-04-08": 1.0861, 
    "2024-04-09": 1.0858, "2024-04-10": 1.0743, "2024-04-11": 1.0728, "2024-04-12": 1.0658, 
    "2024-04-13": 1.0748, "2024-04-14": 1.0732, "2024-04-15": 1.0627, "2024-04-16": 1.0616, 
    "2024-04-17": 1.0672, "2024-04-18": 1.0643, "2024-04-19": 1.0663, "2024-04-20": 1.0689, 
    "2024-04-21": 1.0694, "2024-04-22": 1.0654, "2024-04-23": 1.0702, "2024-04-24": 1.0697, 
    "2024-04-25": 1.0729, "2024-04-26": 1.0695, "2024-04-27": 1.0712, "2024-04-28": 1.0705, 
    "2024-04-29": 1.0719, "2024-04-30": 1.0667,
    "2024-05-01": 1.0718, "2024-05-02": 1.0729, "2024-05-03": 1.0768, "2024-05-04": 1.0789, 
    "2024-05-05": 1.0795, "2024-05-06": 1.0771, "2024-05-07": 1.0753, "2024-05-08": 1.0750, 
    "2024-05-09": 1.0784, "2024-05-10": 1.0779, "2024-05-11": 1.0748, "2024-05-12": 1.0732, 
    "2024-05-13": 1.0790, "2024-05-14": 1.0817, "2024-05-15": 1.0888, "2024-05-16": 1.0868, 
    "2024-05-17": 1.0880, "2024-05-18": 1.0689, "2024-05-19": 1.0694, "2024-05-20": 1.0859, 
    "2024-05-21": 1.0856, "2024-05-22": 1.0825, "2024-05-23": 1.0814, "2024-05-24": 1.0854, 
    "2024-05-25": 1.0712, "2024-05-26": 1.0705, "2024-05-27": 1.0859, "2024-05-28": 1.0857, 
    "2024-05-29": 1.0802, "2024-05-30": 1.0834, "2024-05-31": 1.0858,
    "2024-06-01": 1.0902, "2024-06-02": 1.0895, "2024-06-03": 1.0908, "2024-06-04": 1.0880, 
    "2024-06-05": 1.0871, "2024-06-06": 1.0892, "2024-06-07": 1.0807, "2024-06-08": 1.0847, 
    "2024-06-09": 1.0839, "2024-06-10": 1.0766, "2024-06-11": 1.0743, "2024-06-12": 1.0812, 
    "2024-06-13": 1.0739, "2024-06-14": 1.0723, "2024-06-15": 1.0798, "2024-06-16": 1.0785, 
    "2024-06-17": 1.0736, "2024-06-18": 1.0741, "2024-06-19": 1.0745, "2024-06-20": 1.0703, 
    "2024-06-21": 1.0692, "2024-06-22": 1.0734, "2024-06-23": 1.0728, "2024-06-24": 1.0734, 
    "2024-06-25": 1.0715, "2024-06-26": 1.0680, "2024-06-27": 1.0705, "2024-06-28": 1.0720, 
    "2024-06-29": 1.0720, "2024-06-30": 1.0715,
    "2024-07-01": 1.0739, "2024-07-02": 1.0748, "2024-07-03": 1.0789, "2024-07-04": 1.0811, 
    "2024-07-05": 1.0847, "2024-07-06": 1.0832, "2024-07-07": 1.0827, "2024-07-08": 1.0825, 
    "2024-07-09": 1.0815, "2024-07-10": 1.0833, "2024-07-11": 1.0867, "2024-07-12": 1.0922, 
    "2024-07-13": 1.0879, "2024-07-14": 1.0883, "2024-07-15": 1.0896, "2024-07-16": 1.0900, 
    "2024-07-17": 1.0939, "2024-07-18": 1.0900, "2024-07-19": 1.0893, "2024-07-20": 1.0892, 
    "2024-07-21": 1.0885, "2024-07-22": 1.0892, "2024-07-23": 1.0850, "2024-07-24": 1.0842, 
    "2024-07-25": 1.0847, "2024-07-26": 1.0873, "2024-07-27": 1.0847, "2024-07-28": 1.0839, 
    "2024-07-29": 1.0823, "2024-07-30": 1.0816, "2024-07-31": 1.0827,
    "2024-08-01": 1.0791, "2024-08-02": 1.0921, "2024-08-03": 1.0921, "2024-08-04": 1.0915, 
    "2024-08-05": 1.0959, "2024-08-06": 1.0931, "2024-08-07": 1.0927, "2024-08-08": 1.0917, 
    "2024-08-09": 1.0924, "2024-08-10": 1.0897, "2024-08-11": 1.0886, "2024-08-12": 1.0932, 
    "2024-08-13": 1.0994, "2024-08-14": 1.1013, "2024-08-15": 1.0975, "2024-08-16": 1.1036, 
    "2024-08-17": 1.0847, "2024-08-18": 1.0839, "2024-08-19": 1.1086, "2024-08-20": 1.1129, 
    "2024-08-21": 1.1154, "2024-08-22": 1.1115, "2024-08-23": 1.1203, "2024-08-24": 1.0801, 
    "2024-08-25": 1.0795, "2024-08-26": 1.1163, "2024-08-27": 1.1184, "2024-08-28": 1.1124, 
    "2024-08-29": 1.1078, "2024-08-30": 1.1061, "2024-08-31": 1.1061,
    "2024-09-01": 1.1072, "2024-09-02": 1.1072, "2024-09-03": 1.1045, "2024-09-04": 1.1084, 
    "2024-09-05": 1.1110, "2024-09-06": 1.1090, "2024-09-07": 1.1045, "2024-09-08": 1.1039, 
    "2024-09-09": 1.1040, "2024-09-10": 1.1021, "2024-09-11": 1.1014, "2024-09-12": 1.1071, 
    "2024-09-13": 1.1088, "2024-09-14": 1.1088, "2024-09-15": 1.1075, "2024-09-16": 1.1129, 
    "2024-09-17": 1.1116, "2024-09-18": 1.1123, "2024-09-19": 1.1162, "2024-09-20": 1.1176, 
    "2024-09-21": 1.1176, "2024-09-22": 1.1162, "2024-09-23": 1.1112, "2024-09-24": 1.1181, 
    "2024-09-25": 1.1133, "2024-09-26": 1.1178, "2024-09-27": 1.1172, "2024-09-28": 1.1139, 
    "2024-09-29": 1.1128, "2024-09-30": 1.1139,
    "2024-10-01": 1.1069, "2024-10-02": 1.1048, "2024-10-03": 1.1034, "2024-10-04": 1.0982, 
    "2024-10-05": 1.0982, "2024-10-06": 1.0978, "2024-10-07": 1.0978, "2024-10-08": 1.0979, 
    "2024-10-09": 1.0938, "2024-10-10": 1.0935, "2024-10-11": 1.0943, "2024-10-12": 1.0943, 
    "2024-10-13": 1.0906, "2024-10-14": 1.0906, "2024-10-15": 1.0890, "2024-10-16": 1.0861, 
    "2024-10-17": 1.0831, "2024-10-18": 1.0873, "2024-10-19": 1.0873, "2024-10-20": 1.0817, 
    "2024-10-21": 1.0817, "2024-10-22": 1.0799, "2024-10-23": 1.0782, "2024-10-24": 1.0828, 
    "2024-10-25": 1.0801, "2024-10-26": 1.0801, "2024-10-27": 1.0812, "2024-10-28": 1.0812, 
    "2024-10-29": 1.0819, "2024-10-30": 1.0856, "2024-10-31": 1.0883,
    "2024-11-01": 1.0871, "2024-11-02": 1.0871, "2024-11-03": 1.0878, "2024-11-04": 1.0878, 
    "2024-11-05": 1.0918, "2024-11-06": 1.0730, "2024-11-07": 1.0801, "2024-11-08": 1.0724, 
    "2024-11-09": 1.0724, "2024-11-10": 1.0658, "2024-11-11": 1.0658, "2024-11-12": 1.0616, 
    "2024-11-13": 1.0564, "2024-11-14": 1.0527, "2024-11-15": 1.0546, "2024-11-16": 1.0546, 
    "2024-11-17": 1.0595, "2024-11-18": 1.0595, "2024-11-19": 1.0600, "2024-11-20": 1.0545, 
    "2024-11-21": 1.0473, "2024-11-22": 1.0418, "2024-11-23": 1.0418, "2024-11-24": 1.0497, 
    "2024-11-25": 1.0497, "2024-11-26": 1.0486, "2024-11-27": 1.0566, "2024-11-28": 1.0559, 
    "2024-11-29": 1.0580, "2024-11-30": 1.0580,
    "2024-12-01": 1.0500, "2024-12-02": 1.0500, "2024-12-03": 1.0508, "2024-12-04": 1.0514, 
    "2024-12-05": 1.0587, "2024-12-06": 1.0576, "2024-12-07": 1.0576, "2024-12-08": 1.0554, 
    "2024-12-09": 1.0554, "2024-12-10": 1.0532, "2024-12-11": 1.0501, "2024-12-12": 1.0471, 
    "2024-12-13": 1.0506, "2024-12-14": 1.0506, "2024-12-15": 1.0515, "2024-12-16": 1.0515, 
    "2024-12-17": 1.0495, "2024-12-18": 1.0356, "2024-12-19": 1.0365, "2024-12-20": 1.0432, 
    "2024-12-21": 1.0432, "2024-12-22": 1.0407, "2024-12-23": 1.0407, "2024-12-24": 1.0404, 
    "2024-12-25": 1.0401, "2024-12-26": 1.0424, "2024-12-27": 1.0426, "2024-12-28": 1.0426, 
    "2024-12-29": 1.0403, "2024-12-30": 1.0403, "2024-12-31": 1.0350,
}

# Convertir raw EUR→USD a USD→EUR con fechas en datetime.date
PREDEFINED_USD_TO_EUR_RATES_FOR_CONVERSION: dict[datetime.date, float] = {}
for date_str, eur_usd in _raw_eur_to_usd_rates_2024.items():
    try:
        d = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        if eur_usd and eur_usd != 0:
            PREDEFINED_USD_TO_EUR_RATES_FOR_CONVERSION[d] = round(1 / eur_usd, 8)
    except ValueError:
        print(f"API_PRICING_WARN: Fecha inválida en tabla raw: '{date_str}'")

# --- SÍMBOLOS YAHOO FINANCE ---
# Mapeo de tu símbolo normalizado de la app al ticker de Yahoo Finance (principalmente pares -USD)
YAHOO_CRYPTO_SYMBOLS = {
    "btc": "BTC-USD", "bitcoin": "BTC-USD", "eth": "ETH-USD", "ethereum": "ETH-USD",
    "usdt": "USDT-USD", "tether": "USDT-USD", "bnb": "BNB-USD", "sol": "SOL-USD", "solana": "SOL-USD",
    "xrp": "XRP-USD", "ada": "ADA-USD", "cardano": "ADA-USD",
    "ltc": "LTC-USD", "litecoin": "LTC-USD",
    "usdc": "USDC-USD",
    "doge": "DOGE-USD", "dogecoin": "DOGE-USD",
    "trx": "TRX-USD", "tron": "TRX-USD",
    "sui": "SUI-USD",
    "usds": "USDS-USD", # Asumiendo par YF
    "ai": "AI-USD", 
    "xai": "XAI-USD", 
    "manta": "MANTA-USD",
    "ace": "ACE-USD", 
    "nfp": "NFP-USD", 
    "alt": "ALT-USD", 
    "pixel": "PIXEL-USD",
    "fdusd": "FDUSD-USD", 
    "portal": "PORTAL-USD",
    "aevo": "AEVO-USD",
    "ethfi": "ETHFI-USD",
    "ena": "ENA-USD", 
    "saga": "SAGA-USD",
    "omni": "OMNI-USD", 
    "rez": "REZ-USD", 
    "not": "NOT-USD", 
    "waxp": "WAXP-USD",
    "gala": "GALA-USD",
    "cati": "CATI-USD", # Probablemente no exista en YF, CoinGecko sería mejor
    "hmstr":"HMSTR-USD", # Probablemente no exista en YF
    "scr": "SCR-USD", # Probablemente no exista en YF
    "euri": "EURI-USD", # Si EURI es un token, este sería su par YF.
    "vana": "VANA-USD", # Probablemente no exista en YF
    "bio": "BIO-USD", # Probablemente no exista en YF
}

# --- CACHÉS ---
_yf_price_cache: dict[str, dict[datetime.date, float | None]] = {}
_yf_fx_cache:    dict[datetime.date, float] = {}

def normalizar_simbolo_app(simbolo: str) -> str | None:
    if not isinstance(simbolo, str):
        return None
    s = simbolo.strip().lower()
    for suf in ("usdt", "usd", "-usdt", "-usd"):
        if s.endswith(suf):
            s = s[:-len(suf)]
    return s or None

def _get_yf_crypto_price_usd(ticker: str, fecha: datetime.date) -> float | None:
    cache = _yf_price_cache.setdefault(ticker, {})
    if fecha in cache:
        return cache[fecha]

    precio = None
    try:
        yf_obj = yf.Ticker(ticker)
        df = yf_obj.history(
            start=fecha.isoformat(),
            end=(fecha + datetime.timedelta(days=1)).isoformat(),
            interval="1d"
        )
        if not df.empty and pd.notna(df["Close"].iloc[0]):
            precio = float(df["Close"].iloc[0])
        else:
            # fallback últimos 7 días
            df2 = yf_obj.history(
                end=(fecha + datetime.timedelta(days=1)).isoformat(),
                period="7d", interval="1d"
            )
            if not df2.empty:
                precio = float(df2["Close"].dropna().iloc[-1])
    except Exception:
        precio = None

    cache[fecha] = precio
    return precio

def _get_usd_to_eur_rate(fecha: datetime.date) -> float | None:
    # primero tabla 2024
    if fecha in PREDEFINED_USD_TO_EUR_RATES_FOR_CONVERSION:
        return PREDEFINED_USD_TO_EUR_RATES_FOR_CONVERSION[fecha]

    # fallback solo si no es 2024
    if fecha.year != 2024:
        if fecha in _yf_fx_cache:
            return _yf_fx_cache[fecha]
        try:
            df = yf.Ticker("EURUSD=X").history(
                start=fecha.isoformat(),
                end=(fecha + datetime.timedelta(days=1)).isoformat(),
                interval="1d"
            )
            if not df.empty and pd.notna(df["Close"].iloc[0]):
                eur_usd = float(df["Close"].iloc[0])
                usd_eur = round(1 / eur_usd, 8)
                _yf_fx_cache[fecha] = usd_eur
                return usd_eur
        except Exception:
            pass

    # si es 2024 y faltan datos, o fallback falla:
    return None

def obtener_precio_historico_eur(raw_symbol: str, fecha: datetime.date) -> float | None:
    sym = normalizar_simbolo_app(raw_symbol)
    if not sym:
        return None

    # casos fiat
    if sym == "usd":
        return _get_usd_to_eur_rate(fecha)
    if sym == "eur":
        return 1.0

    # precio cripto en USD
    ticker = YAHOO_CRYPTO_SYMBOLS.get(sym, f"{sym.upper()}-USD")
    precio_usd = _get_yf_crypto_price_usd(ticker, fecha)
    if precio_usd is None:
        return None

    # stablecoins a 1 USD
    if sym in ("usdt", "usdc", "dai", "busd", "fdusd"):
        precio_usd = 1.0

    # convertir a EUR
    tasa = _get_usd_to_eur_rate(fecha)
    if tasa is None:
        return None

    return round(precio_usd * tasa, 8)